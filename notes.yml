exercises:
https://pynative.com/python-dictionary-exercise-with-solutions/
https://www.programiz.com/python-programming/methods/dictionary

# strings
- string is a class in Python, has methods
- array of characters
- 'Z' in <string>
- slicing
- ''' preserves multi-line
- immutable - cannot replace with str1[5] = 'x'

# arithmetics
- remainder/modulus 15 % 4 = 3
- floor division // give integer (removes all after .)

### lists
https://www.w3resource.com/python/python-list.php
- []
- can contain different data type (heterogenous)
- mutable - data can change
- can contain duplicate
- create list: [1, 2, 3] or list((1, 2, 3))
- slicing: listname[start_index : end_index : step]
- reverse list: print(my_list[::-1]) - doesn't overwrite list
- add to list: append, insert (index, moves others to the right), extend(collection - list of items, <list> += [<el>/<collection>], 
- remove from list: remove(first occurence) (loop for all occurences), pop(specfic index), clear (all items in list), del list - 
- search list: index(value, start, end)
- concatenate: + operator, extend() method
- copy list: a[] = b[] (deep copy), new_list = my_list1.copy() method (shallow list)
- sort (mylist.sort() or list = sorted(mylist), reverse (overwrites list), clear
- python builtin functions: max(list), min(list), sum, all (if all values are true or empty list), any(at least one true value)
- nested list - retrieve via nested loop
- list comprehension - create list from list: outputlist = [var**2 for var in inputList if var < 15]
- check if list contains x: x in list1
- count how many times item is present: list.count(x)
- show index of value (first found): list1.index(value)
- iterators for 2 lists - for i, j in zip(list1, list2):
- string to list: myvar = list('abc')
# functions
len() - number of items

sort,reverse method - permanently
sorted function- temporary
len function
# https://www.programiz.com/python-programming/methods/list
- reversed()


### dict
- {}
- unordered set of objects
- comma separated list of pairs key:value
- keys do indexing - immutable type (string, number or tuple)
- print keys: dict1.keys()
- print values: dict1.values()
- print key-value pairs (tuples): dict1.items
- get value: dict1.get('color')
- add: dict1.update({'country' : 'XXX'})
- create dict from given keys and values: x = dict.fromkeys(myk, myv) . this will assign value to all keys. 
    alternatively use x = dict(zip(keys, values))!
    alternatively use loop, get range of keys
    alternatively: dict1 = {k: sample_dict[k] for k in keys}
- remove precise key: dict1.pop('color') or del dict1['color']
    alternatively: {k: sample_dict[k] for k in sample_dict.keys() - keys}
- remove last: dict1.popitem()
- loop: for x, j in dict1.items():
- sort: print(sorted(dict1)) then loop to display
- find max and minimum value: print(max(my_dict.keys()))
- find and set default if failed: dict1.setdefault('fruit', 'bananas')
- check if key with specific value exists: if 'XXX' in dict1
- number of keys: len(dict1)
- merge 2 dicts: dict1.update(dict2) or dict3 = {**dict1, **dict2} (python 3.5)



set function - unique. or set directly - {}
for value (list) in key, do loop 
- dict comprehension: sample_dict = {k: sample_dict[k] for k in sample_dict.keys() - keys}
# methods
- zip() - creates dict from  2 lists. dict1 = dict(zip(keys,values)). takes list with less items
- dict() - creates dict
- dict.update method - inserts item
- merge 2 dicts - dict3 = {**dict1, **dict2} (3.5) or dict3.update(dict2)
- fromkeys method - create dict from default (combine list of keys
- pop - removes item from dictionary. or replace
- if 200 in sample_dict.values():

# tuples
- ()
- ordered (index and slicing), cannot change after creation, duplicates
- packing: tuple1 = 1, 2, "Hello"
    unpacking: i, j, k = tuple1

# sets
https://pynative.com/python-sets/
- set(a) = {1,'xxx',3}
- unordered (not like lists - no index or insert) collection of unique data (no duplicate)
- immutable - cannot modify item's value, but can add or delete
- create set: set((1, 2)) or set = {1, 2} or set(list). create empty set = set()
- add items: a.update([list]) or a.add(sinlge value)
- remove item: .remove(single, error if not found), .discard(single, no error if not found) 
    random - pop
    clear - all items
- operations on sets:
    union (sum of both): a = set1 | set2, or b = set1.union(set2)
    intersection (common in both): d = set1 & set2    or d = set1.intersection(s    et2)
    difference: a = (set1 - set2)   or a = set1.difference(set2)
    symmetric differenc e (unique in both sets- oposite to intersection): a = (set1 ^ set2) or symmetric_difference
    issubset: if all items in set1 are present in set2  : set2.issubset(set4)
    issuperset (contains all elements of B and more)
    isdisjoint (no common elements)
    any,all, max, min
    frozenset: no appending/deleting
- if (1<2) and (5>4)
- if 'a' in 'tama'
- if not

# while
- if if runs break, then else will not execute. break terminates without completing loop


# loop
- for a in range(1,10) - excluding 10
- for key in dict1{}
list function
list comprehension - oneliner for new list generated from existing list4
friend_foods = my_foods[:] - why not just = ?? because then we point to same list. not fork it
tuples - immutable (not change) list, (a, b, c). to change, we redefine variable

# break, continue
- break: exit immediately for loop or while loop
- continue: skip. when hits, doesn't execute. good for conditionals?
# if

car.lower() == 'bmw'
multiple conditions = and and and
( ) and ( ) and ( ) for readability
item in [list] / not in 
else - catchall
if-elif-else vs multiple if  
combine for then if inside loop for special cases
for + in = can use multiple lists




### input & output
https://pynative.com/python-input-and-output-exercise/
- input function  - always converts to string. check type(x)
    for int: make int(input(xxx)) or float(input(xxx))
    take multiple values: name, age = input('give name and age separate by spaces: ').split()
    multiline input: 
        while True:
            line = input()
            if line, else break
        x = '\n'.join(data)
    python2 differences: input (differentiates data type) and raw_input (as string)
- input work with OS commands:
    sys.argv (python program.py - that makes 1 argument already). its a list so sys.argv[0]
- output: 
    print: can define sep=
    formatting: <str>.format(*args, **kwargs)
        print('name {firstname}, age {giveage}'.format(firstname = name, giveage=age))
        print('name {0}, age {1}'.format('toto', 1))
        print('{:^25}'.format(text))
        display binary: print('{0:b}'.format(number))
        text.ljust(60,*)
flag, then whilte true
break = quit loop no rest of the code
break loop - with break (continue after loop) or just return to begin of  loop (continue)
if continue - return to begining of loop
if break - exit loop
break same as active = False in while true

# functions
do one specific action. you call a function with myfuction(). you can store functions in modules
arguments in order - positional arguments
keyword arguments - x='a' when giving parameters
default values - in 
module import - import all functions 
module.function()
from module import function
alias


### class
- blueprint for object. identity attributes (states) and methods (behaviours). use methods to modify state
- object - instance of class (instantiation)
- object creation - constructor method creates object (__new__) then initialize __init__() method
- constructor can be parametrized on non parametrized
- self refers to current object
- attributes: class variables (declare not in method) and instance variables (declare inside __init__() )
    instance variables - create inside constructor (__init__), ex. self.name, access via print(object.name) or getattr(object, 'name')
        delete attribute - delattr(object, 'name') or del object.var
        get dict of attributes - print(object.__dict__)
    class variables: add above __init__, access object.var
        modify class var - class.var = newvalue
- count number of objects:  Employee.count = Employee.count + 1 inside constructor
- destructor: del object. python deletes all objects when program is terminated
- encapsulation - ex. is class object, because it connects data and methods
    self.name (public), self._name (class and subclass), self.__name (private only within class. need to create method to access)
    - ensure encapsulation: getters and setters
        hide private vars: use return, ex. get_age(self) = return self.__age
        validation when setting:  self.__age = age with def set_age
- instance methods vs class methods:
    add instance method at runtime: 
        when cannot modify class (defined in static file)
        import types, then define function in global, then modify instance

            def welcome(self):
                print('hip hip hurraa', self.name)
            marek.welcome = types.MethodType(welcome, marek)

A function thatâ€™s part of a class is a method

# file handling
https://pynative.com/python/file-handling/
https://pynative.com/python-create-file/
    built-in function open()
    use os. to list directories
        with open(os.path.join(path, file_name) as fp
    fp = open('file.txt', '<mode>')
    fp.write()/close()
    files are created in cwd
delete files: https://pynative.com/python-delete-files-and-directories/
    import os
    import pathlib - since python 3.4
with - opens and closes



### print
- https://realpython.com/python-print/
- print() - parentheeses means execute . empty gives invisible newline (lineseparator - os.linesep = '\r\n' on windows, linux is '\n')
    \r (CR) - carriage return - typewriter machine, move to beginning of the line
    \n (LF) - line feed - typewriter advance roll to next line
- windows path - always use \\ even with ', it's still escape character!
- newline with multiline: use
    """This
    or
    """\
    This
- print() - does automatic: print('hello ', 42)
- disable newline: print(1, 2, end='')
- loop will add 2nd newline
- buffering streams: flush=True
- own datatypes: namedtuple
