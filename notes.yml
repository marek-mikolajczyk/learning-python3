exercises:
https://pynative.com/python-dictionary-exercise-with-solutions/
https://www.programiz.com/python-programming/methods/dictionary

# strings
- string is a class in Python, has methods
- array of characters
- 'Z' in <string>
- slicing
- ''' preserves multi-line
- immutable - cannot replace with str1[5] = 'x'

# arithmetics
- remainder/modulus 15 % 4 = 3
- floor division // give integer (removes all after .)

# lists
- []
- not the same data type

sort,reverse method - permanently
sorted function- temporary
len function


### dict
- {}
- unordered set of objects
- comma separated list of objects key:value
- keys are used for indexing - immutable(string, number or tuple
get method - default vaule
for loop dict - for key,value in dict.items().
for name,language - we create new dict. needs key-value dict
.keys method - pull all keys , but its default behaviour
sorted function + keys method
.values shows all values
set function - unique. or set directly - {}
for value (list) in key, do loop 
- dict comprehension: sample_dict = {k: sample_dict[k] for k in sample_dict.keys() - keys}
# methods
- zip() - creates dict from  2 lists. dict1 = dict(zip(keys,values)). takes list with less items
- dict() - creates dict
- dict.update method - inserts item
- merge 2 dicts - dict3 = {**dict1, **dict2} (3.5) or dict3.update(dict2)
- fromkeys method - create dict from default (combine list of keys
- pop - removes item from dictionary. or replace
- if 200 in sample_dict.values():

# tuples
- ()

# sets
- set(a) = {1,2,3}
- unique values

# conditionals
- if (1<2) and (5>4)
- if 'a' in 'tama'
- if not

# while
- if if runs break, then else will not execute. break terminates without completing loop


# loop
- for a in range(1,10) - excluding 10
- for key in dict1{}
list function
list comprehension - oneliner for new list generated from existing list4
friend_foods = my_foods[:] - why not just = ?? because then we point to same list. not fork it
tuples - immutable (not change) list, (a, b, c). to change, we redefine variable

# break, continue
- break: exit immediately for loop or while loop
- continue: skip. when hits, doesn't execute. good for conditionals?
# if

car.lower() == 'bmw'
multiple conditions = and and and
( ) and ( ) and ( ) for readability
item in [list] / not in 
else - catchall
if-elif-else vs multiple if  
combine for then if inside loop for special cases
for + in = can use multiple lists




# input
input function
input always string
% - modul, form odd/even
flag, then whilte true
break = quit loop no rest of the code
break loop - with break (continue after loop) or just return to begin of  loop (continue)
if continue - return to begining of loop
if break - exit loop
break same as active = False in while true

# functions
do one specific action. you call a function with myfuction(). you can store functions in modules
arguments in order - positional arguments
keyword arguments - x='a' when giving parameters
default values - in 
module import - import all functions 
module.function()
from module import function
alias


# class
A function thatâ€™s part of a class is a method

# files
with - opens and closes
